Runtime features
----------------

Visualizing the workflow as a graph
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When running a workflow, its possible to generate a provenance graph at
the same time:

 
-----
$ swift -pgraph graph.dot first.swift
$ dot -ograph.png -Tpng graph.dot
----

graph.png can then be viewed using your favourite image viewer. The dot application is part of the graphViz project. More information can be found at http://www.graphviz.org.

Running on a remote site
~~~~~~~~~~~~~~~~~~~~~~~~

As configured by default, all jobs are run locally. In the previous
examples, we've invoked echo and tr executables from our SwiftScript
program. These have been run on the local system (the same computer on
which you ran swift). We can also make our computations run on a
remote resource.

WARNING: This example is necessarily more vague than previous ones,
because it requires access to remote resources. You should ensure that
you can submit a job using the globus-job-run (or globusrun-ws)
command(s).

We do not need to modify any SwiftScript code to run on another
resource. Instead, we must modify another catalog, the site catalog.
This catalog provides details of the location that applications will be
run, with the default settings referring to the local machine. We will
modify it to refer to a remote resource - the UC Teraport cluster. If
you are not a UC Teraport user, you should use details of a different
resource that you do have access to.

The site catalog is located in etc/sites.xml and is a relatively
straightforward XML format file. We must modify each of the following
three settings: gridftp (which indicates how and where data can be
transferred to the remote resource), jobmanager (which indicates how
applications can be run on the remote resource) and workdirectory (which
indicates where working storage can be found on the remote resource).


Writing a mapper
~~~~~~~~~~~~~~~~

This section will introduce writing a custom mapper so that Swift is
able to access data files laid out in application-specific ways.

An application-specific mapper must take the form of a Java class that
implements the http://www.ci.uchicago.edu/swift/javadoc/vdsk/org/griphyn/vdl/mapping/Mapper.html[Mapper
interface].

Usually you don't need to implement this interface directly, because
Swift provides a number of more concrete classes with some functionality
already implemented.

The hierarchy of helper classes is:

http://www.ci.uchicago.edu/swift/javadoc/vdsk/org/griphyn/vdl/mapping/Mapper.html[Mapper]
 
This is the abstract interface for mappers in Swift. You must
implement methods to provide access to mapper properties, to map from a
SwiftScript dataset path (such as foo[1].bar) to a file name, to check
whether a file exists. None of the default Swift mappers implement this
interface directly - instead they use one of the following helper classes.

http://www.ci.uchicago.edu/swift/javadoc/vdsk/org/griphyn/vdl/mapping/AbstractMapper.html[Abstract Mapper]

This provides helper methods to manage mapper properties and to handle
existance checking. Examples of mappers which use this class are: 
http://www.ci.uchicago.edu/swift/guides/userguide.php#mapper.array_mapper[Array Mapper], 
http://www.ci.uchicago.edu/swift/guides/userguide.php#mapper.csv_mapper[CSV Mapper],
http://www.ci.uchicago.edu/swift/guides/userguide.php#mapper.fixed_array_mapper[Fixed Array Mapper],
http://www.ci.uchicago.edu/swift/guides/userguide.php#mapper.regexp_mapper[Regexp Mapper],
and http://www.ci.uchicago.edu/swift/guides/userguide.php#mapper.single_file_mapper[Single File Mapper].

http://www.ci.uchicago.edu/swift/javadoc/vdsk/org/griphyn/vdl/mapping/file/AbstractFileMapper.html[AbstractFileMapper]
This provides a helper class for mappers which select files based on
selecting files from a directory listing. It is necessary to write some
helper methods that are different from the above mapper methods.
Examples of mappers which use this class are:
http://www.ci.uchicago.edu/swift/guides/userguide.php#mapper.simple_mapper[simple_mapper],
http://www.ci.uchicago.edu/swift/guides/userguide.php#mapper.filesys_mapper[filesys_mapper],
and the StructuredRegularExpressionMapper.

In general, to write a mapper, choose either the AbstractMapper or the
AbstractFileMapper and extend those. If your mapper will generally
select the files it returns based on a directory listing and will
convert paths to filenames using some regular conversion (for example,
in the way that simple_mapper maps files in a directory that match a
particular pattern), then you should probably use the
AbstractFileMapper. If your mapper will produce a list of files in some
other way (for example, in the way that csv_mapper maps based on
filenames given in a CSV file rather than looking at which files are in
a directory), then you should probably use the AbstractMapper.


Writing a very basic mapper
~~~~~~~~~~~~~~~~~~~~~~~~~~~

In this section, we will write a very basic (almost useless) mapper that
will map a SwiftScript dataset into a hardcoded file called
myfile.txt, like this:


    Swift variable                            Filename

      var   <----------------------------->    myfile.txt

We should be able to use the mapper we write in a SwiftScript program
like this:

 
----
type file;  
file f <my_first_mapper>;  
----

First we must choose a base class - AbstractMapper or
AbstractFileMapper. We aren't going to use a directory listing to decide
on our mapping - we are getting the mapping from some other source (in
fact, it will be hard coded). So we will use AbstractMapper.

So now onto the source code. We must define a subclass of AbstractMapper
and implement several mapper methods: isStatic, existing, and map. These
methods are documented in the javadoc for the Mapper interface.

Here is the code implementing this mapper. Put this in your source
vdsk directory, make a directory src/tutorial/|and put this file in
src/tutorial/MyFirstMapper.java.

.MyFirstMapper.java
******************* 
----
include::../../examples/tutorial/MyFirstMapper.java[]
----
*******************

Now we need to inform the Swift engine about the existence of this
mapper. We do that by editing the MapperFactory class definition, in
src/org/griphyn/vdl/mapping/MapperFactory.java and adding a
registerMapper call alongside the existing registerMapper calls, like this:

 
----
registerMapper("my_first_mapper", tutorial.MyFirstMapper.class);  
----

The first parameter is the name of the mapper that will be used in
SwiftScript program. The second parameter is the new Mapper class that
we just wrote.

Now rebuild Swift using the "ant redist" target.

This new Swift build will be aware of your new mapper. We can test it
out with a hello world program:

.my_first_mapper.swift
********************** 
-----
include::../../examples/tutorial/my_first_mapper.swift[]
-----
**********************

Run this program, and hopefully you will find the "hello" string has
been output into the hard coded output file myfile.txt:

 
----
$ cat myfile.txt
hello
----

So that's a first very simple mapper implemented. Compare the source
code to the single_file_mapper in
http://www.ci.uchicago.edu/trac/swift/browser/trunk/src/org/griphyn/vdl/mapping/file/SingleFileMapper.java[SingleFileMapper.java].
There is not much more code to the single_file_mapper - mostly code to
deal with the file parameter.


Starting and restarting
~~~~~~~~~~~~~~~~~~~~~~~

Now we're going to try out the restart capabilities of Swift. We will
make a workflow that will deliberately fail, and then we will fix the
problem so that Swift can continue with the workflow.

First we have the program in working form, restart.swift.

.restart.swift
************** 
----
include::../../examples/tutorial/restart.swift[]
----
**************

We must define some transformation catalog entries:
 
----
localhost   touch   /usr/bin/touch  INSTALLED   INTEL32::LINUX  null  
localhost   broken  /bin/true   INSTALLED   INTEL32::LINUX  null  
----

Now we can run the program:
 
----
$ swift restart.swift    
Swift 0.9 swift-r2860 cog-r2388  
  
RunID: 20100526-1119-3kgzzi15  
Progress:  
Final status:  Finished successfully:4  
----

Four jobs run - touch, echo, broken and a final echo. (note that broken
isn't actually broken yet).

Now we will break the broken job and see what happens. Replace the
definition in tc.data for broken with this:

----
localhost    broken     /bin/false   INSTALLED       INTEL32::LINUX  null  
----

Now when we run the workflow, the broken task fails:
 
----
$ swift restart.swift   
  
Swift 0.9 swift-r2860 cog-r2388  
  
RunID: 20100526-1121-tssdcljg  
Progress:  
Progress:  Stage in:1  Finished successfully:2  
Execution failed:  
    Exception in broken:  
Arguments: [process]  
Host: localhost  
Directory: restart-20100526-1121-tssdcljg/jobs/1/broken-1i6ufisj  
stderr.txt:   
stdout.txt:   
----

From the output we can see that touch and the first echo completed, but
then broken failed and so swift did not attempt to execute the final echo.

There will be a restart log with the same name as the RunID:

 
----
$ ls *20100526-1121-tssdcljg*rlog  
restart-20100526-1121-tssdcljg.0.rlog  
----

This restart log contains enough information for swift to know which
parts of the workflow were executed successfully.

We can try to rerun it immediately, like this:

 
----
$ swift -resume restart-20100526-1121-tssdcljg.0.rlog restart.swift   
  
Swift 0.9 swift-r2860 cog-r2388  
  
RunID: 20100526-1125-7yx0zi6d  
Progress:  
Execution failed:  
    Exception in broken:  
Arguments: [process]  
Host: localhost  
Directory: restart-20100526-1125-7yx0zi6d/jobs/m/broken-msn1gisj  
stderr.txt:   
stdout.txt:   
  
Caused by:  
    Exit code 1  
----

Swift tried to resume the workflow by executing "broken" again. It did
not try to run the touch or first echo jobs, because the restart log
says that they do not need to be executed again.

Broken failed again, leaving the original restart log in place.

Now we will fix the problem with "broken" by restoring the original
tc.data line that works.

Remove the existing "broken" line and replace it with the successful
tc.data entry above:

 
----
localhost       broken          /bin/true   INSTALLED       INTEL32::LINUX  null  
----

Now run again:

 
----
$ swift -resume restart-20100526-1121-tssdcljg.0.rlog restart.swift  
  
Swift 0.9 swift-r2860 cog-r2388  
  
RunID: 20100526-1128-a2gfuxhg  
Progress:  
Final status:  Initializing:2  Finished successfully:2  
----

Swift tries to run "broken" again. This time it works, and so Swift
continues on to execute the final piece of the workflow as if nothing
had ever gone wrong.
